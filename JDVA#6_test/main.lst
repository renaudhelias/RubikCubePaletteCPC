                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _vsync
                             13 	.globl _get_key
                             14 	.globl _check_controller
                             15 	.globl _precalc_vram
                             16 	.globl _put_frame
                             17 	.globl _mode
                             18 	.globl _set_palette
                             19 	.globl _vram
                             20 	.globl _fish
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
   0000                      28 _fish::
   0000                      29 	.ds 24
   0018                      30 _vram::
   0018                      31 	.ds 2
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _INITIALIZED
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DABS (ABS)
                             40 ;--------------------------------------------------------
                             41 ; global & static initialisations
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _GSINIT
                             45 	.area _GSFINAL
                             46 	.area _GSINIT
                             47 ;--------------------------------------------------------
                             48 ; Home
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _HOME
                             52 ;--------------------------------------------------------
                             53 ; code
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 ;main.c:14: void main(void)
                             57 ;	---------------------------------
                             58 ; Function main
                             59 ; ---------------------------------
   0000                      60 _main::
   0000 DD E5         [15]   61 	push	ix
   0002 DD 21 00 00   [14]   62 	ld	ix,#0
   0006 DD 39         [15]   63 	add	ix,sp
   0008 F5            [11]   64 	push	af
   0009 3B            [ 6]   65 	dec	sp
                             66 ;main.c:17: x=10;
   000A DD 36 FD 0A   [19]   67 	ld	-3 (ix),#0x0a
                             68 ;main.c:19: vram=precalc_vram();
   000E CDr00r00      [17]   69 	call	_precalc_vram
   0011 EB            [ 4]   70 	ex	de,hl
   0012 ED 53r18r00   [20]   71 	ld	(_vram),de
                             72 ;main.c:21: fish[0]=poisson1;
   0016 21r00r00      [10]   73 	ld	hl,#_poisson1
   0019 22r00r00      [16]   74 	ld	(_fish), hl
                             75 ;main.c:22: fish[1]=poisson2;
   001C 21r00r00      [10]   76 	ld	hl,#_poisson2
   001F 22r02r00      [16]   77 	ld	((_fish + 0x0002)), hl
                             78 ;main.c:23: fish[2]=poisson_groupe;
   0022 21r00r00      [10]   79 	ld	hl,#_poisson_groupe
   0025 22r04r00      [16]   80 	ld	((_fish + 0x0004)), hl
                             81 ;main.c:24: fish[3]=poisson_groupe+(6*16);
   0028 21r60r00      [10]   82 	ld	hl,#(_poisson_groupe + 0x0060)
   002B 22r06r00      [16]   83 	ld	((_fish + 0x0006)), hl
                             84 ;main.c:25: fish[4]=poisson_groupe+((6*16)*2);
   002E 21rC0r00      [10]   85 	ld	hl,#(_poisson_groupe + 0x00c0)
   0031 22r08r00      [16]   86 	ld	((_fish + 0x0008)), hl
                             87 ;main.c:26: fish[5]=poisson_groupe+((6*16)*9); // fond vide
   0034 21r60r03      [10]   88 	ld	hl,#(_poisson_groupe + 0x0360)
   0037 22r0Ar00      [16]   89 	ld	((_fish + 0x000a)), hl
                             90 ;main.c:28: mode(0);
   003A AF            [ 4]   91 	xor	a, a
   003B F5            [11]   92 	push	af
   003C 33            [ 6]   93 	inc	sp
   003D CDr00r00      [17]   94 	call	_mode
   0040 33            [ 6]   95 	inc	sp
                             96 ;main.c:29: set_palette(poisson_palette);
   0041 21r00r00      [10]   97 	ld	hl,#_poisson_palette
   0044 E5            [11]   98 	push	hl
   0045 CDr00r00      [17]   99 	call	_set_palette
   0048 F1            [10]  100 	pop	af
                            101 ;main.c:31: while(1){
   0049                     102 00106$:
                            103 ;main.c:32: check_controller();
   0049 CDr00r00      [17]  104 	call	_check_controller
                            105 ;main.c:39: vsync();
   004C CDr00r00      [17]  106 	call	_vsync
                            107 ;main.c:41: put_frame(vram(x,50),6,16,fish[5]);
   004F 21r0Ar00      [10]  108 	ld	hl, #(_fish + 0x000a) + 0
   0052 7E            [ 7]  109 	ld	a,(hl)
   0053 DD 77 FE      [19]  110 	ld	-2 (ix),a
   0056 23            [ 6]  111 	inc	hl
   0057 7E            [ 7]  112 	ld	a,(hl)
   0058 DD 77 FF      [19]  113 	ld	-1 (ix),a
   005B DD 4E FD      [19]  114 	ld	c, -3 (ix)
   005E 06 00         [ 7]  115 	ld	b, #0x00
   0060 21 E0 D1      [10]  116 	ld	hl,#0xd1e0
   0063 09            [11]  117 	add	hl,bc
   0064 EB            [ 4]  118 	ex	de,hl
   0065 C5            [11]  119 	push	bc
   0066 DD 6E FE      [19]  120 	ld	l,-2 (ix)
   0069 DD 66 FF      [19]  121 	ld	h,-1 (ix)
   006C E5            [11]  122 	push	hl
   006D 21 06 10      [10]  123 	ld	hl,#0x1006
   0070 E5            [11]  124 	push	hl
   0071 D5            [11]  125 	push	de
   0072 CDr00r00      [17]  126 	call	_put_frame
   0075 21 06 00      [10]  127 	ld	hl,#6
   0078 39            [11]  128 	add	hl,sp
   0079 F9            [ 6]  129 	ld	sp,hl
   007A C1            [10]  130 	pop	bc
                            131 ;main.c:42: put_frame((unsigned char *)(vram[100]+x),6,16,fish[5]);
   007B ED 5Br0Ar00   [20]  132 	ld	de, (#(_fish + 0x000a) + 0)
   007F 2Ar18r00      [16]  133 	ld	hl,(_vram)
   0082 C5            [11]  134 	push	bc
   0083 01 C8 00      [10]  135 	ld	bc, #0x00c8
   0086 09            [11]  136 	add	hl, bc
   0087 C1            [10]  137 	pop	bc
   0088 7E            [ 7]  138 	ld	a, (hl)
   0089 23            [ 6]  139 	inc	hl
   008A 66            [ 7]  140 	ld	h,(hl)
   008B 81            [ 4]  141 	add	a, c
   008C 4F            [ 4]  142 	ld	c,a
   008D 7C            [ 4]  143 	ld	a,h
   008E 88            [ 4]  144 	adc	a, b
   008F 47            [ 4]  145 	ld	b,a
   0090 D5            [11]  146 	push	de
   0091 21 06 10      [10]  147 	ld	hl,#0x1006
   0094 E5            [11]  148 	push	hl
   0095 C5            [11]  149 	push	bc
   0096 CDr00r00      [17]  150 	call	_put_frame
   0099 21 06 00      [10]  151 	ld	hl,#6
   009C 39            [11]  152 	add	hl,sp
   009D F9            [ 6]  153 	ld	sp,hl
                            154 ;main.c:43: if (get_key(Key_O)) {
   009E 3E 22         [ 7]  155 	ld	a,#0x22
   00A0 F5            [11]  156 	push	af
   00A1 33            [ 6]  157 	inc	sp
   00A2 CDr00r00      [17]  158 	call	_get_key
   00A5 33            [ 6]  159 	inc	sp
   00A6 7D            [ 4]  160 	ld	a,l
   00A7 B7            [ 4]  161 	or	a, a
   00A8 28 03         [12]  162 	jr	Z,00102$
                            163 ;main.c:44: x--;
   00AA DD 35 FD      [23]  164 	dec	-3 (ix)
   00AD                     165 00102$:
                            166 ;main.c:46: if (get_key(Key_P)) {
   00AD 3E 1B         [ 7]  167 	ld	a,#0x1b
   00AF F5            [11]  168 	push	af
   00B0 33            [ 6]  169 	inc	sp
   00B1 CDr00r00      [17]  170 	call	_get_key
   00B4 33            [ 6]  171 	inc	sp
   00B5 7D            [ 4]  172 	ld	a,l
   00B6 B7            [ 4]  173 	or	a, a
   00B7 28 03         [12]  174 	jr	Z,00104$
                            175 ;main.c:47: x++;
   00B9 DD 34 FD      [23]  176 	inc	-3 (ix)
   00BC                     177 00104$:
                            178 ;main.c:50: put_frame(vram(x,50),6,16,fish[4]);
   00BC 21r08r00      [10]  179 	ld	hl, #(_fish + 0x0008) + 0
   00BF 7E            [ 7]  180 	ld	a,(hl)
   00C0 DD 77 FE      [19]  181 	ld	-2 (ix),a
   00C3 23            [ 6]  182 	inc	hl
   00C4 7E            [ 7]  183 	ld	a,(hl)
   00C5 DD 77 FF      [19]  184 	ld	-1 (ix),a
   00C8 DD 5E FD      [19]  185 	ld	e, -3 (ix)
   00CB 16 00         [ 7]  186 	ld	d, #0x00
   00CD 21 E0 D1      [10]  187 	ld	hl,#0xd1e0
   00D0 19            [11]  188 	add	hl,de
   00D1 4D            [ 4]  189 	ld	c,l
   00D2 44            [ 4]  190 	ld	b,h
   00D3 D5            [11]  191 	push	de
   00D4 DD 6E FE      [19]  192 	ld	l,-2 (ix)
   00D7 DD 66 FF      [19]  193 	ld	h,-1 (ix)
   00DA E5            [11]  194 	push	hl
   00DB 21 06 10      [10]  195 	ld	hl,#0x1006
   00DE E5            [11]  196 	push	hl
   00DF C5            [11]  197 	push	bc
   00E0 CDr00r00      [17]  198 	call	_put_frame
   00E3 21 06 00      [10]  199 	ld	hl,#6
   00E6 39            [11]  200 	add	hl,sp
   00E7 F9            [ 6]  201 	ld	sp,hl
   00E8 D1            [10]  202 	pop	de
                            203 ;main.c:51: put_frame((unsigned char *)(vram[100]+x),6,16,fish[1]);
   00E9 ED 4Br02r00   [20]  204 	ld	bc, (#(_fish + 0x0002) + 0)
   00ED 2Ar18r00      [16]  205 	ld	hl,(_vram)
   00F0 C5            [11]  206 	push	bc
   00F1 01 C8 00      [10]  207 	ld	bc, #0x00c8
   00F4 09            [11]  208 	add	hl, bc
   00F5 C1            [10]  209 	pop	bc
   00F6 7E            [ 7]  210 	ld	a, (hl)
   00F7 23            [ 6]  211 	inc	hl
   00F8 66            [ 7]  212 	ld	h,(hl)
   00F9 83            [ 4]  213 	add	a, e
   00FA 5F            [ 4]  214 	ld	e,a
   00FB 7C            [ 4]  215 	ld	a,h
   00FC 8A            [ 4]  216 	adc	a, d
   00FD 57            [ 4]  217 	ld	d,a
   00FE C5            [11]  218 	push	bc
   00FF 21 06 10      [10]  219 	ld	hl,#0x1006
   0102 E5            [11]  220 	push	hl
   0103 D5            [11]  221 	push	de
   0104 CDr00r00      [17]  222 	call	_put_frame
   0107 21 06 00      [10]  223 	ld	hl,#6
   010A 39            [11]  224 	add	hl,sp
   010B F9            [ 6]  225 	ld	sp,hl
   010C C3r49r00      [10]  226 	jp	00106$
                            227 	.area _CODE
                            228 	.area _INITIALIZER
                            229 	.area _CABS (ABS)
