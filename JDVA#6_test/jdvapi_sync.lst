                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module jdvapi_sync
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _scan
                             12 	.globl _overscan
                             13 	.globl _scroll
                             14 	.globl _bank7_4000
                             15 	.globl _bank6_4000
                             16 	.globl _bank5_4000
                             17 	.globl _bank4_4000
                             18 	.globl _bank7_C000
                             19 	.globl _bank0123
                             20 	.globl _calque4C00
                             21 	.globl _calque4000
                             22 	.globl _calqueC000
                             23 	.globl _vsync
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DATA
                             31 ;--------------------------------------------------------
                             32 ; ram data
                             33 ;--------------------------------------------------------
                             34 	.area _INITIALIZED
                             35 ;--------------------------------------------------------
                             36 ; absolute external ram data
                             37 ;--------------------------------------------------------
                             38 	.area _DABS (ABS)
                             39 ;--------------------------------------------------------
                             40 ; global & static initialisations
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _GSINIT
                             44 	.area _GSFINAL
                             45 	.area _GSINIT
                             46 ;--------------------------------------------------------
                             47 ; Home
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _HOME
                             51 ;--------------------------------------------------------
                             52 ; code
                             53 ;--------------------------------------------------------
                             54 	.area _CODE
                             55 ;jdvapi_sync.c:2: void vsync()
                             56 ;	---------------------------------
                             57 ; Function vsync
                             58 ; ---------------------------------
   0000                      59 _vsync::
                             60 ;jdvapi_sync.c:12: __endasm;
   0000 06 F5         [ 7]   61 	ld	b,#0xf5 ;; PPI port B input
   0002                      62 	    _wait_vsync:
   0002 ED 78         [12]   63 	in	a,(c) ;; [4] read PPI port B input
                             64 ;;	(bit 0 = "1" if vsync is active,
                             65 ;;	or bit 0 = "0" if vsync is in-active)
   0004 1F            [ 4]   66 	rra	;; [1] put bit 0 into carry flag
   0005 D2r02r00      [10]   67 	jp	nc,_wait_vsync ;; [3] if carry not set, loop, otherwise continue
   0008 C9            [10]   68 	ret
                             69 ;jdvapi_sync.c:15: void calqueC000()
                             70 ;	---------------------------------
                             71 ; Function calqueC000
                             72 ; ---------------------------------
   0009                      73 _calqueC000::
                             74 ;jdvapi_sync.c:22: __endasm;
   0009 01 0C BC      [10]   75 	ld	bc,#0xBC00+12 ; On met la valeur 48 dans
   000C ED 49         [12]   76 	out	(c),c ; le registre 12 du CRTC
   000E 01 30 BD      [10]   77 	ld	bc,#0xBD00+48
   0011 ED 49         [12]   78 	out	(c),c
   0013 C9            [10]   79 	ret
                             80 ;jdvapi_sync.c:25: void calque4000()
                             81 ;	---------------------------------
                             82 ; Function calque4000
                             83 ; ---------------------------------
   0014                      84 _calque4000::
                             85 ;jdvapi_sync.c:32: __endasm;
   0014 01 0C BC      [10]   86 	ld	bc,#0xBC00+12 ; On met la valeur 16 dans
   0017 ED 49         [12]   87 	out	(c),c ; le registre 12 du CRTC
   0019 01 10 BD      [10]   88 	ld	bc,#0xBD00+16
   001C ED 49         [12]   89 	out	(c),c
   001E C9            [10]   90 	ret
                             91 ;jdvapi_sync.c:35: void calque4C00()
                             92 ;	---------------------------------
                             93 ; Function calque4C00
                             94 ; ---------------------------------
   001F                      95 _calque4C00::
                             96 ;jdvapi_sync.c:42: __endasm;
   001F 01 0C BC      [10]   97 	ld	bc,#0xBC00+12 ; On met la valeur 28 dans
   0022 ED 49         [12]   98 	out	(c),c ; le registre 12 du CRTC
   0024 01 1C BD      [10]   99 	ld	bc,#0xBD00+28
   0027 ED 49         [12]  100 	out	(c),c
   0029 C9            [10]  101 	ret
                            102 ;jdvapi_sync.c:45: void bank0123()
                            103 ;	---------------------------------
                            104 ; Function bank0123
                            105 ; ---------------------------------
   002A                     106 _bank0123::
                            107 ;jdvapi_sync.c:50: __endasm;
   002A 01 C0 7F      [10]  108 	ld	bc,#0x7FC0+0 ; RAM r√©tablie
   002D ED 49         [12]  109 	out	(c),c
   002F C9            [10]  110 	ret
                            111 ;jdvapi_sync.c:53: void bank7_C000()
                            112 ;	---------------------------------
                            113 ; Function bank7_C000
                            114 ; ---------------------------------
   0030                     115 _bank7_C000::
                            116 ;jdvapi_sync.c:58: __endasm;
   0030 01 C1 7F      [10]  117 	ld	bc,#0x7FC0+1 ; RAM_7 sur &C000-&FFFF
   0033 ED 49         [12]  118 	out	(c),c
   0035 C9            [10]  119 	ret
                            120 ;jdvapi_sync.c:61: void bank4_4000()
                            121 ;	---------------------------------
                            122 ; Function bank4_4000
                            123 ; ---------------------------------
   0036                     124 _bank4_4000::
                            125 ;jdvapi_sync.c:66: __endasm;
   0036 01 C4 7F      [10]  126 	ld	bc,#0x7FC0+4 ; RAM_4 sur &4000-&7FFF
   0039 ED 49         [12]  127 	out	(c),c
   003B C9            [10]  128 	ret
                            129 ;jdvapi_sync.c:69: void bank5_4000()
                            130 ;	---------------------------------
                            131 ; Function bank5_4000
                            132 ; ---------------------------------
   003C                     133 _bank5_4000::
                            134 ;jdvapi_sync.c:74: __endasm;
   003C 01 C5 7F      [10]  135 	ld	bc,#0x7FC0+5 ; RAM_5 sur &4000-&7FFF
   003F ED 49         [12]  136 	out	(c),c
   0041 C9            [10]  137 	ret
                            138 ;jdvapi_sync.c:77: void bank6_4000()
                            139 ;	---------------------------------
                            140 ; Function bank6_4000
                            141 ; ---------------------------------
   0042                     142 _bank6_4000::
                            143 ;jdvapi_sync.c:82: __endasm;
   0042 01 C6 7F      [10]  144 	ld	bc,#0x7FC0+6 ; RAM_6 sur &4000-&7FFF
   0045 ED 49         [12]  145 	out	(c),c
   0047 C9            [10]  146 	ret
                            147 ;jdvapi_sync.c:85: void bank7_4000()
                            148 ;	---------------------------------
                            149 ; Function bank7_4000
                            150 ; ---------------------------------
   0048                     151 _bank7_4000::
                            152 ;jdvapi_sync.c:90: __endasm;
   0048 01 C7 7F      [10]  153 	ld	bc,#0x7FC0+7 ; RAM_7 sur &4000-&7FFF
   004B ED 49         [12]  154 	out	(c),c
   004D C9            [10]  155 	ret
                            156 ;jdvapi_sync.c:93: void scroll(unsigned char h)
                            157 ;	---------------------------------
                            158 ; Function scroll
                            159 ; ---------------------------------
   004E                     160 _scroll::
   004E DD E5         [15]  161 	push	ix
   0050 DD 21 00 00   [14]  162 	ld	ix,#0
   0054 DD 39         [15]  163 	add	ix,sp
                            164 ;jdvapi_sync.c:102: __endasm;
   0056 DD 7E 04      [19]  165 	ld	A,4 (IX)
   0059 01 0C BC      [10]  166 	ld	bc,#0xBC00+12
   005C ED 49         [12]  167 	out	(c),c
   005E 06 BD         [ 7]  168 	ld	b,#0xBD
   0060 4F            [ 4]  169 	ld	c,A
   0061 ED 49         [12]  170 	out	(c),c
   0063 DD E1         [14]  171 	pop	ix
   0065 C9            [10]  172 	ret
                            173 ;jdvapi_sync.c:105: void overscan()
                            174 ;	---------------------------------
                            175 ; Function overscan
                            176 ; ---------------------------------
   0066                     177 _overscan::
                            178 ;jdvapi_sync.c:124: __endasm;
   0066 01 01 BC      [10]  179 	ld	bc,#0xBC00+1 ; On met la valeur 48 dans
   0069 ED 49         [12]  180 	out	(c),c ; le registre 1 du CRTC -- RHdisp
   006B 01 30 BD      [10]  181 	ld	bc,#0xBD00+48
   006E ED 49         [12]  182 	out	(c),c
   0070 01 02 BC      [10]  183 	ld	bc,#0xBC00+2 ; On met la valeur 50 dans
   0073 ED 49         [12]  184 	out	(c),c ; le registre 2 du CRTC -- RHsyncpos
   0075 01 32 BD      [10]  185 	ld	bc,#0xBD00+50
   0078 ED 49         [12]  186 	out	(c),c
   007A 01 06 BC      [10]  187 	ld	bc,#0xBC00+6 ; On met la valeur 34 dans
   007D ED 49         [12]  188 	out	(c),c ; le registre 6 du CRTC -- RVdisp
   007F 01 22 BD      [10]  189 	ld	bc,#0xBD00+34
   0082 ED 49         [12]  190 	out	(c),c
   0084 01 07 BC      [10]  191 	ld	bc,#0xBC00+7 ; On met la valeur 35 dans
   0087 ED 49         [12]  192 	out	(c),c ; le registre 7 du CRTC -- RVsyncpos
   0089 01 23 BD      [10]  193 	ld	bc,#0xBD00+35
   008C ED 49         [12]  194 	out	(c),c
   008E C9            [10]  195 	ret
                            196 ;jdvapi_sync.c:127: void scan()
                            197 ;	---------------------------------
                            198 ; Function scan
                            199 ; ---------------------------------
   008F                     200 _scan::
                            201 ;jdvapi_sync.c:146: __endasm;
   008F 01 01 BC      [10]  202 	ld	bc,#0xBC00+1 ; On remet la valeur 40 dans
   0092 ED 49         [12]  203 	out	(c),c ; le registre 1 du CRTC -- RHdisp
   0094 01 28 BD      [10]  204 	ld	bc,#0xBD00+40
   0097 ED 49         [12]  205 	out	(c),c
   0099 01 02 BC      [10]  206 	ld	bc,#0xBC00+2 ; On remet la valeur 46 dans
   009C ED 49         [12]  207 	out	(c),c ; le registre 2 du CRTC -- RHsyncpos
   009E 01 2E BD      [10]  208 	ld	bc,#0xBD00+46
   00A1 ED 49         [12]  209 	out	(c),c
   00A3 01 06 BC      [10]  210 	ld	bc,#0xBC00+6 ; On remet la valeur 25 dans
   00A6 ED 49         [12]  211 	out	(c),c ; le registre 6 du CRTC -- RVdisp
   00A8 01 19 BD      [10]  212 	ld	bc,#0xBD00+25
   00AB ED 49         [12]  213 	out	(c),c
   00AD 01 07 BC      [10]  214 	ld	bc,#0xBC00+7 ; On remet la valeur 30 dans
   00B0 ED 49         [12]  215 	out	(c),c ; le registre 7 du CRTC -- RVsyncpos
   00B2 01 1E BD      [10]  216 	ld	bc,#0xBD00+30
   00B5 ED 49         [12]  217 	out	(c),c
   00B7 C9            [10]  218 	ret
                            219 	.area _CODE
                            220 	.area _INITIALIZER
                            221 	.area _CABS (ABS)
