                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module combat2
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _transfertEtDecoupe
                             13 	.globl _LoadFile
                             14 	.globl _SetupDOS
                             15 	.globl _calque4C00
                             16 	.globl _scan
                             17 	.globl _overscan
                             18 	.globl _bank7_4000
                             19 	.globl _bank6_4000
                             20 	.globl _bank5_4000
                             21 	.globl _bank4_4000
                             22 	.globl _bank0123
                             23 	.globl _calque4000
                             24 	.globl _calqueC000
                             25 	.globl _vsync
                             26 	.globl _precalc_vram
                             27 	.globl _erase_frame
                             28 	.globl _put_frame_transparent
                             29 	.globl _put_frame
                             30 	.globl _mode
                             31 	.globl _border
                             32 	.globl _set_palette
                             33 	.globl _strlen
                             34 	.globl _nFileNameLen
                             35 	.globl _vram
                             36 	.globl _intro_palette
                             37 	.globl _combat2_palette
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DATA
   0000                      45 _vram::
   0000                      46 	.ds 2
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _INITIALIZED
   0000                      51 _nFileNameLen::
   0000                      52 	.ds 1
                             53 ;--------------------------------------------------------
                             54 ; absolute external ram data
                             55 ;--------------------------------------------------------
                             56 	.area _DABS (ABS)
                             57 ;--------------------------------------------------------
                             58 ; global & static initialisations
                             59 ;--------------------------------------------------------
                             60 	.area _HOME
                             61 	.area _GSINIT
                             62 	.area _GSFINAL
                             63 	.area _GSINIT
                             64 ;--------------------------------------------------------
                             65 ; Home
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _HOME
                             69 ;--------------------------------------------------------
                             70 ; code
                             71 ;--------------------------------------------------------
                             72 	.area _CODE
                             73 ;jdvapi_floppy.c:15: void SetupDOS()
                             74 ;	---------------------------------
                             75 ; Function SetupDOS
                             76 ; ---------------------------------
   0000                      77 _SetupDOS::
   0000 DD E5         [15]   78 	push	ix
   0002 DD 21 00 00   [14]   79 	ld	ix,#0
   0006 DD 39         [15]   80 	add	ix,sp
                             81 ;jdvapi_floppy.c:48: __endasm;
   0008 DD 6E 02      [19]   82 	ld	l, 2 (ix) ;stack return address
   000B DD 66 03      [19]   83 	ld	h, 3 (ix) ;stack return address
   000E 22r2Br00      [16]   84 	ld	(_stack+1), hl
                             85 ;;------------------------------------------------------------------------
                             86 ;;	store the drive number the loader was run from
   0011 2A 7D BE      [16]   87 	ld	hl,(#0xbe7d)
   0014 7E            [ 7]   88 	ld	a,(hl)
   0015 32r25r00      [13]   89 	ld	(_drive+1),a
                             90 ;;------------------------------------------------------------------------
   0018 0E FF         [ 7]   91 	ld	c,#0xff ;; disable all roms
   001A 21r20r00      [10]   92 	ld	hl, #_start222 ;; execution address for program
   001D CD 16 BD      [17]   93 	call	#0xbd16 ;;mc_start_program ;; start it
   0020                      94 	    _start222::
   0020 00            [ 4]   95 	nop
   0021 CD CB BC      [17]   96 	call	#0xbccb ;;kl_rom_walk ;; enable all roms
                             97 ;;------------------------------------------------------------------------
                             98 ;;	when AMSDOS is enabled, the drive reverts back to drive 0!
                             99 ;;	This will restore the drive number to the drive the loader was run from
   0024                     100 	    _drive:
   0024 3E 00         [ 7]  101 	ld a, #0x00
   0026 2A 7D BE      [16]  102 	ld	hl,(#0xbe7d)
   0029 77            [ 7]  103 	ld	(hl),a
   002A                     104 	    _stack:
   002A 21 00 00      [10]  105 	ld hl, #0x0000
   002D E5            [11]  106 	push	hl
   002E E5            [11]  107 	push	hl
   002F DD E1         [14]  108 	pop	ix
   0031 C9            [10]  109 	ret
                            110 ;jdvapi_floppy.c:58: void LoadFile(char *sFileName, char *pLoadAddress)
                            111 ;	---------------------------------
                            112 ; Function LoadFile
                            113 ; ---------------------------------
   0032                     114 _LoadFile::
   0032 DD E5         [15]  115 	push	ix
   0034 DD 21 00 00   [14]  116 	ld	ix,#0
   0038 DD 39         [15]  117 	add	ix,sp
                            118 ;jdvapi_floppy.c:60: nFileNameLen = strlen(sFileName);
   003A DD 6E 04      [19]  119 	ld	l,4 (ix)
   003D DD 66 05      [19]  120 	ld	h,5 (ix)
   0040 E5            [11]  121 	push	hl
   0041 CDr00r00      [17]  122 	call	_strlen
   0044 F1            [10]  123 	pop	af
   0045 4D            [ 4]  124 	ld	c,l
   0046 44            [ 4]  125 	ld	b,h
   0047 FD 21r00r00   [14]  126 	ld	iy,#_nFileNameLen
   004B FD 71 00      [19]  127 	ld	0 (iy),c
                            128 ;jdvapi_floppy.c:92: __endasm;
                            129 ;;	B = length of the filename in characters
   004E 21r00r00      [10]  130 	ld	hl, #_nFileNameLen;
   0051 46            [ 7]  131 	ld	b, (hl)
                            132 ;;	HL = address of the start of the filename
   0052 DD 6E 04      [19]  133 	LD	L, 4 (IX) ;sFileName
   0055 DD 66 05      [19]  134 	LD	H, 5 (IX) ;sFileName
                            135 ;;	DE = address of a 2k buffer
                            136 ;;	in disc mode: this buffer is not used when CAS IN DIRECT
                            137 ;;	firmware function is used, so it is safe to put it anywhere
                            138 ;;	you want.
   0058 11 00 00      [10]  139 	ld	de, #0x0
                            140 ;;	firmware function to open a file for reading
   005B CD 77 BC      [17]  141 	call	#0xbc77 ;;cas_in_open
                            142 ;;	firmware function to load the entire file
                            143 ;;	this will work with files that have a AMSDOS header (ASCII
                            144 ;;	files do not have a header)
                            145 ;;	HL = load address
   005E DD 6E 06      [19]  146 	LD	L, 6 (IX) ;pLoadAddress
   0061 DD 66 07      [19]  147 	LD	H, 7 (IX) ;pLoadAddress
                            148 ;;	read file
   0064 CD 83 BC      [17]  149 	call	#0xbc83 ;;cas_in_direct
                            150 ;;	firmware function to close a file opened for reading
   0067 CD 7A BC      [17]  151 	call	#0xbc7a ;;cas_in_close
   006A DD E1         [14]  152 	pop	ix
   006C C9            [10]  153 	ret
                            154 ;combat2.c:25: void transfertEtDecoupe()
                            155 ;	---------------------------------
                            156 ; Function transfertEtDecoupe
                            157 ; ---------------------------------
   006D                     158 _transfertEtDecoupe::
   006D DD E5         [15]  159 	push	ix
   006F DD 21 00 00   [14]  160 	ld	ix,#0
   0073 DD 39         [15]  161 	add	ix,sp
   0075 21 EF FF      [10]  162 	ld	hl,#-17
   0078 39            [11]  163 	add	hl,sp
   0079 F9            [ 6]  164 	ld	sp,hl
                            165 ;combat2.c:28: n=0;
   007A 1E 00         [ 7]  166 	ld	e,#0x00
                            167 ;combat2.c:29: for (j=0;j<TAILLE_Y/TAILLE_Y_SPRITE;j++) {
   007C DD 36 F1 00   [19]  168 	ld	-15 (ix),#0x00
   0080 DD 36 F2 00   [19]  169 	ld	-14 (ix),#0x00
   0084 01 00 00      [10]  170 	ld	bc,#0x0000
                            171 ;combat2.c:30: for (i=0;i<TAILLE_X/TAILLE_X_SPRITE;i++) {
   0087                     172 00119$:
   0087 DD 73 FF      [19]  173 	ld	-1 (ix),e
   008A DD 36 F3 00   [19]  174 	ld	-13 (ix),#0x00
   008E DD 36 F4 00   [19]  175 	ld	-12 (ix),#0x00
   0092 DD 36 FD 00   [19]  176 	ld	-3 (ix),#0x00
   0096 DD 36 FE 00   [19]  177 	ld	-2 (ix),#0x00
                            178 ;combat2.c:31: for (x=0;x<TAILLE_X_SPRITE;x++) {
   009A                     179 00117$:
   009A DD 36 F7 00   [19]  180 	ld	-9 (ix),#0x00
   009E DD 36 F8 00   [19]  181 	ld	-8 (ix),#0x00
                            182 ;combat2.c:32: for (y=0;y<TAILLE_Y_SPRITE;y++) {
   00A2                     183 00115$:
   00A2 DD 36 F5 00   [19]  184 	ld	-11 (ix),#0x00
   00A6 DD 36 F6 00   [19]  185 	ld	-10 (ix),#0x00
   00AA DD 36 FB 00   [19]  186 	ld	-5 (ix),#0x00
   00AE DD 36 FC 00   [19]  187 	ld	-4 (ix),#0x00
   00B2 DD 36 F9 00   [19]  188 	ld	-7 (ix),#0x00
   00B6 DD 36 FA 00   [19]  189 	ld	-6 (ix),#0x00
   00BA                     190 00105$:
                            191 ;combat2.c:33: addressFrom=0xC000+y*TAILLE_X +j*TAILLE_X*TAILLE_Y_SPRITE+x+i*TAILLE_X_SPRITE;
   00BA DD 7E FB      [19]  192 	ld	a,-5 (ix)
   00BD C6 00         [ 7]  193 	add	a, #0x00
   00BF 5F            [ 4]  194 	ld	e,a
   00C0 DD 7E FC      [19]  195 	ld	a,-4 (ix)
   00C3 CE C0         [ 7]  196 	adc	a, #0xc0
   00C5 57            [ 4]  197 	ld	d,a
   00C6 7B            [ 4]  198 	ld	a,e
   00C7 81            [ 4]  199 	add	a, c
   00C8 5F            [ 4]  200 	ld	e,a
   00C9 7A            [ 4]  201 	ld	a,d
   00CA 88            [ 4]  202 	adc	a, b
   00CB 57            [ 4]  203 	ld	d,a
   00CC 7B            [ 4]  204 	ld	a,e
   00CD DD 86 F7      [19]  205 	add	a, -9 (ix)
   00D0 5F            [ 4]  206 	ld	e,a
   00D1 7A            [ 4]  207 	ld	a,d
   00D2 DD 8E F8      [19]  208 	adc	a, -8 (ix)
   00D5 57            [ 4]  209 	ld	d,a
   00D6 7B            [ 4]  210 	ld	a,e
   00D7 DD 86 FD      [19]  211 	add	a, -3 (ix)
   00DA 5F            [ 4]  212 	ld	e,a
   00DB 7A            [ 4]  213 	ld	a,d
   00DC DD 8E FE      [19]  214 	adc	a, -2 (ix)
   00DF 57            [ 4]  215 	ld	d,a
   00E0 33            [ 6]  216 	inc	sp
   00E1 33            [ 6]  217 	inc	sp
   00E2 D5            [11]  218 	push	de
                            219 ;combat2.c:34: addressTo=0x4000+n*TAILLE_X_SPRITE*TAILLE_Y_SPRITE + y*TAILLE_X_SPRITE+x;
   00E3 DD 5E FF      [19]  220 	ld	e,-1 (ix)
   00E6 16 00         [ 7]  221 	ld	d,#0x00
   00E8 6B            [ 4]  222 	ld	l, e
   00E9 62            [ 4]  223 	ld	h, d
   00EA 29            [11]  224 	add	hl, hl
   00EB 29            [11]  225 	add	hl, hl
   00EC 29            [11]  226 	add	hl, hl
   00ED 19            [11]  227 	add	hl, de
   00EE 29            [11]  228 	add	hl, hl
   00EF 29            [11]  229 	add	hl, hl
   00F0 19            [11]  230 	add	hl, de
   00F1 29            [11]  231 	add	hl, hl
   00F2 19            [11]  232 	add	hl, de
   00F3 29            [11]  233 	add	hl, hl
   00F4 29            [11]  234 	add	hl, hl
   00F5 11 00 40      [10]  235 	ld	de, #0x4000
   00F8 19            [11]  236 	add	hl, de
   00F9 7D            [ 4]  237 	ld	a,l
   00FA DD 86 F9      [19]  238 	add	a, -7 (ix)
   00FD 5F            [ 4]  239 	ld	e,a
   00FE 7C            [ 4]  240 	ld	a,h
   00FF DD 8E FA      [19]  241 	adc	a, -6 (ix)
   0102 57            [ 4]  242 	ld	d,a
   0103 7B            [ 4]  243 	ld	a,e
   0104 DD 86 F7      [19]  244 	add	a, -9 (ix)
   0107 5F            [ 4]  245 	ld	e,a
   0108 7A            [ 4]  246 	ld	a,d
   0109 DD 8E F8      [19]  247 	adc	a, -8 (ix)
   010C 57            [ 4]  248 	ld	d,a
                            249 ;combat2.c:35: *addressTo=*addressFrom;
   010D E1            [10]  250 	pop	hl
   010E E5            [11]  251 	push	hl
   010F 7E            [ 7]  252 	ld	a,(hl)
   0110 12            [ 7]  253 	ld	(de),a
                            254 ;combat2.c:32: for (y=0;y<TAILLE_Y_SPRITE;y++) {
   0111 DD 7E FB      [19]  255 	ld	a,-5 (ix)
   0114 C6 4E         [ 7]  256 	add	a, #0x4e
   0116 DD 77 FB      [19]  257 	ld	-5 (ix),a
   0119 DD 7E FC      [19]  258 	ld	a,-4 (ix)
   011C CE 00         [ 7]  259 	adc	a, #0x00
   011E DD 77 FC      [19]  260 	ld	-4 (ix),a
   0121 DD 7E F9      [19]  261 	ld	a,-7 (ix)
   0124 C6 06         [ 7]  262 	add	a, #0x06
   0126 DD 77 F9      [19]  263 	ld	-7 (ix),a
   0129 DD 7E FA      [19]  264 	ld	a,-6 (ix)
   012C CE 00         [ 7]  265 	adc	a, #0x00
   012E DD 77 FA      [19]  266 	ld	-6 (ix),a
   0131 DD 34 F5      [23]  267 	inc	-11 (ix)
   0134 20 03         [12]  268 	jr	NZ,00147$
   0136 DD 34 F6      [23]  269 	inc	-10 (ix)
   0139                     270 00147$:
   0139 DD 7E F5      [19]  271 	ld	a,-11 (ix)
   013C D6 32         [ 7]  272 	sub	a, #0x32
   013E DD 7E F6      [19]  273 	ld	a,-10 (ix)
   0141 DE 00         [ 7]  274 	sbc	a, #0x00
   0143 DArBAr00      [10]  275 	jp	C,00105$
                            276 ;combat2.c:31: for (x=0;x<TAILLE_X_SPRITE;x++) {
   0146 DD 34 F7      [23]  277 	inc	-9 (ix)
   0149 20 03         [12]  278 	jr	NZ,00148$
   014B DD 34 F8      [23]  279 	inc	-8 (ix)
   014E                     280 00148$:
   014E DD 7E F7      [19]  281 	ld	a,-9 (ix)
   0151 D6 06         [ 7]  282 	sub	a, #0x06
   0153 DD 7E F8      [19]  283 	ld	a,-8 (ix)
   0156 DE 00         [ 7]  284 	sbc	a, #0x00
   0158 DArA2r00      [10]  285 	jp	C,00115$
                            286 ;combat2.c:38: n++;
   015B DD 34 FF      [23]  287 	inc	-1 (ix)
                            288 ;combat2.c:30: for (i=0;i<TAILLE_X/TAILLE_X_SPRITE;i++) {
   015E DD 7E FD      [19]  289 	ld	a,-3 (ix)
   0161 C6 06         [ 7]  290 	add	a, #0x06
   0163 DD 77 FD      [19]  291 	ld	-3 (ix),a
   0166 DD 7E FE      [19]  292 	ld	a,-2 (ix)
   0169 CE 00         [ 7]  293 	adc	a, #0x00
   016B DD 77 FE      [19]  294 	ld	-2 (ix),a
   016E DD 34 F3      [23]  295 	inc	-13 (ix)
   0171 20 03         [12]  296 	jr	NZ,00149$
   0173 DD 34 F4      [23]  297 	inc	-12 (ix)
   0176                     298 00149$:
   0176 DD 7E F3      [19]  299 	ld	a,-13 (ix)
   0179 D6 0D         [ 7]  300 	sub	a, #0x0d
   017B DD 7E F4      [19]  301 	ld	a,-12 (ix)
   017E DE 00         [ 7]  302 	sbc	a, #0x00
   0180 DAr9Ar00      [10]  303 	jp	C,00117$
                            304 ;combat2.c:29: for (j=0;j<TAILLE_Y/TAILLE_Y_SPRITE;j++) {
   0183 DD 5E FF      [19]  305 	ld	e,-1 (ix)
   0186 21 3C 0F      [10]  306 	ld	hl,#0x0f3c
   0189 09            [11]  307 	add	hl,bc
   018A 4D            [ 4]  308 	ld	c,l
   018B 44            [ 4]  309 	ld	b,h
   018C DD 34 F1      [23]  310 	inc	-15 (ix)
   018F 20 03         [12]  311 	jr	NZ,00150$
   0191 DD 34 F2      [23]  312 	inc	-14 (ix)
   0194                     313 00150$:
   0194 DD 7E F1      [19]  314 	ld	a,-15 (ix)
   0197 D6 04         [ 7]  315 	sub	a, #0x04
   0199 DD 7E F2      [19]  316 	ld	a,-14 (ix)
   019C DE 00         [ 7]  317 	sbc	a, #0x00
   019E DAr87r00      [10]  318 	jp	C,00119$
   01A1 DD F9         [10]  319 	ld	sp, ix
   01A3 DD E1         [14]  320 	pop	ix
   01A5 C9            [10]  321 	ret
                            322 ;combat2.c:55: void main(void)
                            323 ;	---------------------------------
                            324 ; Function main
                            325 ; ---------------------------------
   01A6                     326 _main::
   01A6 DD E5         [15]  327 	push	ix
   01A8 DD 21 00 00   [14]  328 	ld	ix,#0
   01AC DD 39         [15]  329 	add	ix,sp
   01AE F5            [11]  330 	push	af
                            331 ;combat2.c:58: volatile char layer=0;volatile char x=10;//char z=0;
   01AF DD 36 FF 00   [19]  332 	ld	-1 (ix),#0x00
   01B3 DD 36 FE 0A   [19]  333 	ld	-2 (ix),#0x0a
                            334 ;combat2.c:61: SetupDOS();
   01B7 CDr00r00      [17]  335 	call	_SetupDOS
                            336 ;combat2.c:62: calque4000();
   01BA CDr00r00      [17]  337 	call	_calque4000
                            338 ;combat2.c:63: mode(0); // à cause de la publicité ParaDOS ;)
   01BD AF            [ 4]  339 	xor	a, a
   01BE F5            [11]  340 	push	af
   01BF 33            [ 6]  341 	inc	sp
   01C0 CDr00r00      [17]  342 	call	_mode
   01C3 33            [ 6]  343 	inc	sp
                            344 ;combat2.c:64: border(0);
   01C4 AF            [ 4]  345 	xor	a, a
   01C5 F5            [11]  346 	push	af
   01C6 33            [ 6]  347 	inc	sp
   01C7 CDr00r00      [17]  348 	call	_border
   01CA 33            [ 6]  349 	inc	sp
                            350 ;combat2.c:65: set_palette(intro_palette);
   01CB 21r88r04      [10]  351 	ld	hl,#_intro_palette
   01CE E5            [11]  352 	push	hl
   01CF CDr00r00      [17]  353 	call	_set_palette
   01D2 F1            [10]  354 	pop	af
                            355 ;combat2.c:66: overscan();
   01D3 CDr00r00      [17]  356 	call	_overscan
                            357 ;combat2.c:68: calque4C00();
   01D6 CDr00r00      [17]  358 	call	_calque4C00
                            359 ;combat2.c:69: bank0123();
   01D9 CDr00r00      [17]  360 	call	_bank0123
                            361 ;combat2.c:70: LoadFile("intro-oc.scr", (char *)0x4000);
   01DC 21 00 40      [10]  362 	ld	hl,#0x4000
   01DF E5            [11]  363 	push	hl
   01E0 21r98r04      [10]  364 	ld	hl,#___str_0
   01E3 E5            [11]  365 	push	hl
   01E4 CDr32r00      [17]  366 	call	_LoadFile
   01E7 F1            [10]  367 	pop	af
   01E8 F1            [10]  368 	pop	af
                            369 ;combat2.c:72: vram=precalc_vram();
   01E9 CDr00r00      [17]  370 	call	_precalc_vram
   01EC 4D            [ 4]  371 	ld	c,l
   01ED 44            [ 4]  372 	ld	b,h
   01EE ED 43r00r00   [20]  373 	ld	(_vram),bc
                            374 ;combat2.c:74: bank0123();
   01F2 CDr00r00      [17]  375 	call	_bank0123
                            376 ;combat2.c:75: LoadFile("J1A.scr", (char *)0xC000); // un scr exporté "linéaire"
   01F5 21 00 C0      [10]  377 	ld	hl,#0xc000
   01F8 E5            [11]  378 	push	hl
   01F9 21rA5r04      [10]  379 	ld	hl,#___str_1
   01FC E5            [11]  380 	push	hl
   01FD CDr32r00      [17]  381 	call	_LoadFile
   0200 F1            [10]  382 	pop	af
   0201 F1            [10]  383 	pop	af
                            384 ;combat2.c:76: bank4_4000();
   0202 CDr00r00      [17]  385 	call	_bank4_4000
                            386 ;combat2.c:77: transfertEtDecoupe();
   0205 CDr6Dr00      [17]  387 	call	_transfertEtDecoupe
                            388 ;combat2.c:79: bank0123();
   0208 CDr00r00      [17]  389 	call	_bank0123
                            390 ;combat2.c:80: LoadFile("J1R.scr", (char *)0xC000); // un scr exporté "linéaire"
   020B 21 00 C0      [10]  391 	ld	hl,#0xc000
   020E E5            [11]  392 	push	hl
   020F 21rADr04      [10]  393 	ld	hl,#___str_2
   0212 E5            [11]  394 	push	hl
   0213 CDr32r00      [17]  395 	call	_LoadFile
   0216 F1            [10]  396 	pop	af
   0217 F1            [10]  397 	pop	af
                            398 ;combat2.c:81: bank5_4000();
   0218 CDr00r00      [17]  399 	call	_bank5_4000
                            400 ;combat2.c:82: transfertEtDecoupe();
   021B CDr6Dr00      [17]  401 	call	_transfertEtDecoupe
                            402 ;combat2.c:84: bank0123();
   021E CDr00r00      [17]  403 	call	_bank0123
                            404 ;combat2.c:85: LoadFile("J2A.scr", (char *)0xC000); // un scr exporté "linéaire"
   0221 21 00 C0      [10]  405 	ld	hl,#0xc000
   0224 E5            [11]  406 	push	hl
   0225 21rB5r04      [10]  407 	ld	hl,#___str_3
   0228 E5            [11]  408 	push	hl
   0229 CDr32r00      [17]  409 	call	_LoadFile
   022C F1            [10]  410 	pop	af
   022D F1            [10]  411 	pop	af
                            412 ;combat2.c:86: bank6_4000();
   022E CDr00r00      [17]  413 	call	_bank6_4000
                            414 ;combat2.c:87: transfertEtDecoupe();
   0231 CDr6Dr00      [17]  415 	call	_transfertEtDecoupe
                            416 ;combat2.c:89: bank0123();
   0234 CDr00r00      [17]  417 	call	_bank0123
                            418 ;combat2.c:90: LoadFile("J2R.scr", (char *)0xC000); // un scr exporté "linéaire"
   0237 21 00 C0      [10]  419 	ld	hl,#0xc000
   023A E5            [11]  420 	push	hl
   023B 21rBDr04      [10]  421 	ld	hl,#___str_4
   023E E5            [11]  422 	push	hl
   023F CDr32r00      [17]  423 	call	_LoadFile
   0242 F1            [10]  424 	pop	af
   0243 F1            [10]  425 	pop	af
                            426 ;combat2.c:91: bank7_4000();
   0244 CDr00r00      [17]  427 	call	_bank7_4000
                            428 ;combat2.c:92: transfertEtDecoupe();
   0247 CDr6Dr00      [17]  429 	call	_transfertEtDecoupe
                            430 ;combat2.c:95: calqueC000();
   024A CDr00r00      [17]  431 	call	_calqueC000
                            432 ;combat2.c:96: bank0123();
   024D CDr00r00      [17]  433 	call	_bank0123
                            434 ;combat2.c:97: mode(2);
   0250 3E 02         [ 7]  435 	ld	a,#0x02
   0252 F5            [11]  436 	push	af
   0253 33            [ 6]  437 	inc	sp
   0254 CDr00r00      [17]  438 	call	_mode
   0257 33            [ 6]  439 	inc	sp
                            440 ;combat2.c:98: border(0);
   0258 AF            [ 4]  441 	xor	a, a
   0259 F5            [11]  442 	push	af
   025A 33            [ 6]  443 	inc	sp
   025B CDr00r00      [17]  444 	call	_border
   025E 33            [ 6]  445 	inc	sp
                            446 ;combat2.c:99: set_palette(combat2_palette);
   025F 21r78r04      [10]  447 	ld	hl,#_combat2_palette
   0262 E5            [11]  448 	push	hl
   0263 CDr00r00      [17]  449 	call	_set_palette
   0266 F1            [10]  450 	pop	af
                            451 ;combat2.c:100: scan();
   0267 CDr00r00      [17]  452 	call	_scan
                            453 ;combat2.c:101: bank0123();
   026A CDr00r00      [17]  454 	call	_bank0123
                            455 ;combat2.c:102: LoadFile("fond2.scr", (char *)0xC000);
   026D 21 00 C0      [10]  456 	ld	hl,#0xc000
   0270 E5            [11]  457 	push	hl
   0271 21rC5r04      [10]  458 	ld	hl,#___str_5
   0274 E5            [11]  459 	push	hl
   0275 CDr32r00      [17]  460 	call	_LoadFile
   0278 F1            [10]  461 	pop	af
   0279 F1            [10]  462 	pop	af
                            463 ;combat2.c:104: erase_frame((unsigned char *)(vram[120]+3),6*7+3,50);
   027A 2Ar00r00      [16]  464 	ld	hl,(_vram)
   027D 11 F0 00      [10]  465 	ld	de, #0x00f0
   0280 19            [11]  466 	add	hl, de
   0281 7E            [ 7]  467 	ld	a, (hl)
   0282 23            [ 6]  468 	inc	hl
   0283 46            [ 7]  469 	ld	b, (hl)
   0284 4F            [ 4]  470 	ld	c, a
   0285 03            [ 6]  471 	inc	bc
   0286 03            [ 6]  472 	inc	bc
   0287 03            [ 6]  473 	inc	bc
   0288 21 2D 32      [10]  474 	ld	hl,#0x322d
   028B E5            [11]  475 	push	hl
   028C C5            [11]  476 	push	bc
   028D CDr00r00      [17]  477 	call	_erase_frame
   0290 F1            [10]  478 	pop	af
   0291 F1            [10]  479 	pop	af
                            480 ;combat2.c:107: while(1){
   0292                     481 00102$:
                            482 ;combat2.c:110: vsync();
   0292 CDr00r00      [17]  483 	call	_vsync
                            484 ;combat2.c:111: calqueC000();
   0295 CDr00r00      [17]  485 	call	_calqueC000
                            486 ;combat2.c:112: bank0123();
   0298 CDr00r00      [17]  487 	call	_bank0123
                            488 ;combat2.c:113: memcpy((char *)0x4000, (char *)0xC000, 0x3FFF); // memcpy(destination,source,longueur)
   029B 11 00 40      [10]  489 	ld	de,#0x4000
   029E 21 00 C0      [10]  490 	ld	hl,#0xc000
   02A1 01 FF 3F      [10]  491 	ld	bc,#0x3fff
   02A4 ED B0         [21]  492 	ldir
                            493 ;combat2.c:117: vsync();
   02A6 CDr00r00      [17]  494 	call	_vsync
                            495 ;combat2.c:118: calque4000();
   02A9 CDr00r00      [17]  496 	call	_calque4000
                            497 ;combat2.c:119: bank4_4000();
   02AC CDr00r00      [17]  498 	call	_bank4_4000
                            499 ;combat2.c:120: x=7;
   02AF DD 36 FE 07   [19]  500 	ld	-2 (ix),#0x07
                            501 ;combat2.c:122: put_frame((unsigned char *)(vram[120]+x),6,50,0x4000+((6*50)*layer));
   02B3 DD 4E FF      [19]  502 	ld	c,-1 (ix)
   02B6 06 00         [ 7]  503 	ld	b,#0x00
   02B8 69            [ 4]  504 	ld	l, c
   02B9 60            [ 4]  505 	ld	h, b
   02BA 29            [11]  506 	add	hl, hl
   02BB 29            [11]  507 	add	hl, hl
   02BC 29            [11]  508 	add	hl, hl
   02BD 09            [11]  509 	add	hl, bc
   02BE 29            [11]  510 	add	hl, hl
   02BF 29            [11]  511 	add	hl, hl
   02C0 09            [11]  512 	add	hl, bc
   02C1 29            [11]  513 	add	hl, hl
   02C2 09            [11]  514 	add	hl, bc
   02C3 29            [11]  515 	add	hl, hl
   02C4 29            [11]  516 	add	hl, hl
   02C5 01 00 40      [10]  517 	ld	bc,#0x4000
   02C8 09            [11]  518 	add	hl,bc
   02C9 4D            [ 4]  519 	ld	c,l
   02CA 44            [ 4]  520 	ld	b,h
   02CB 2Ar00r00      [16]  521 	ld	hl,(_vram)
   02CE 11 F0 00      [10]  522 	ld	de, #0x00f0
   02D1 19            [11]  523 	add	hl, de
   02D2 7E            [ 7]  524 	ld	a, (hl)
   02D3 23            [ 6]  525 	inc	hl
   02D4 66            [ 7]  526 	ld	h,(hl)
   02D5 6F            [ 4]  527 	ld	l,a
   02D6 DD 5E FE      [19]  528 	ld	e,-2 (ix)
   02D9 16 00         [ 7]  529 	ld	d,#0x00
   02DB 7D            [ 4]  530 	ld	a,l
   02DC 83            [ 4]  531 	add	a, e
   02DD 5F            [ 4]  532 	ld	e,a
   02DE 7C            [ 4]  533 	ld	a,h
   02DF 8A            [ 4]  534 	adc	a, d
   02E0 57            [ 4]  535 	ld	d,a
   02E1 C5            [11]  536 	push	bc
   02E2 21 06 32      [10]  537 	ld	hl,#0x3206
   02E5 E5            [11]  538 	push	hl
   02E6 D5            [11]  539 	push	de
   02E7 CDr00r00      [17]  540 	call	_put_frame
   02EA 21 06 00      [10]  541 	ld	hl,#6
   02ED 39            [11]  542 	add	hl,sp
   02EE F9            [ 6]  543 	ld	sp,hl
                            544 ;combat2.c:124: put_frame((unsigned char *)(vram[120]+x+6+6+6+6+3),6,50,0x4000+((6*50)*layer));
   02EF DD 4E FF      [19]  545 	ld	c,-1 (ix)
   02F2 06 00         [ 7]  546 	ld	b,#0x00
   02F4 69            [ 4]  547 	ld	l, c
   02F5 60            [ 4]  548 	ld	h, b
   02F6 29            [11]  549 	add	hl, hl
   02F7 29            [11]  550 	add	hl, hl
   02F8 29            [11]  551 	add	hl, hl
   02F9 09            [11]  552 	add	hl, bc
   02FA 29            [11]  553 	add	hl, hl
   02FB 29            [11]  554 	add	hl, hl
   02FC 09            [11]  555 	add	hl, bc
   02FD 29            [11]  556 	add	hl, hl
   02FE 09            [11]  557 	add	hl, bc
   02FF 29            [11]  558 	add	hl, hl
   0300 29            [11]  559 	add	hl, hl
   0301 01 00 40      [10]  560 	ld	bc,#0x4000
   0304 09            [11]  561 	add	hl,bc
   0305 4D            [ 4]  562 	ld	c,l
   0306 44            [ 4]  563 	ld	b,h
   0307 2Ar00r00      [16]  564 	ld	hl,(_vram)
   030A 11 F0 00      [10]  565 	ld	de, #0x00f0
   030D 19            [11]  566 	add	hl, de
   030E 7E            [ 7]  567 	ld	a, (hl)
   030F 23            [ 6]  568 	inc	hl
   0310 66            [ 7]  569 	ld	h,(hl)
   0311 6F            [ 4]  570 	ld	l,a
   0312 DD 5E FE      [19]  571 	ld	e,-2 (ix)
   0315 16 00         [ 7]  572 	ld	d,#0x00
   0317 7D            [ 4]  573 	ld	a,l
   0318 83            [ 4]  574 	add	a, e
   0319 5F            [ 4]  575 	ld	e,a
   031A 7C            [ 4]  576 	ld	a,h
   031B 8A            [ 4]  577 	adc	a, d
   031C 57            [ 4]  578 	ld	d,a
   031D 21 1B 00      [10]  579 	ld	hl,#0x001b
   0320 19            [11]  580 	add	hl,de
   0321 EB            [ 4]  581 	ex	de,hl
   0322 C5            [11]  582 	push	bc
   0323 21 06 32      [10]  583 	ld	hl,#0x3206
   0326 E5            [11]  584 	push	hl
   0327 D5            [11]  585 	push	de
   0328 CDr00r00      [17]  586 	call	_put_frame
   032B 21 06 00      [10]  587 	ld	hl,#6
   032E 39            [11]  588 	add	hl,sp
   032F F9            [ 6]  589 	ld	sp,hl
                            590 ;combat2.c:125: bank6_4000();
   0330 CDr00r00      [17]  591 	call	_bank6_4000
                            592 ;combat2.c:127: erase_frame((unsigned char *)(vram[120]+x+6),4,50);
   0333 2Ar00r00      [16]  593 	ld	hl,(_vram)
   0336 11 F0 00      [10]  594 	ld	de, #0x00f0
   0339 19            [11]  595 	add	hl, de
   033A 7E            [ 7]  596 	ld	a, (hl)
   033B 23            [ 6]  597 	inc	hl
   033C 66            [ 7]  598 	ld	h,(hl)
   033D 6F            [ 4]  599 	ld	l,a
   033E DD 4E FE      [19]  600 	ld	c,-2 (ix)
   0341 06 00         [ 7]  601 	ld	b,#0x00
   0343 7D            [ 4]  602 	ld	a,l
   0344 81            [ 4]  603 	add	a, c
   0345 4F            [ 4]  604 	ld	c,a
   0346 7C            [ 4]  605 	ld	a,h
   0347 88            [ 4]  606 	adc	a, b
   0348 47            [ 4]  607 	ld	b,a
   0349 21 06 00      [10]  608 	ld	hl,#0x0006
   034C 09            [11]  609 	add	hl,bc
   034D 4D            [ 4]  610 	ld	c,l
   034E 44            [ 4]  611 	ld	b,h
   034F 21 04 32      [10]  612 	ld	hl,#0x3204
   0352 E5            [11]  613 	push	hl
   0353 C5            [11]  614 	push	bc
   0354 CDr00r00      [17]  615 	call	_erase_frame
   0357 F1            [10]  616 	pop	af
   0358 F1            [10]  617 	pop	af
                            618 ;combat2.c:128: put_frame_transparent((unsigned char *)(vram[120]+x+3+1),6,50,0x4000+((6*50)*layer));
   0359 DD 4E FF      [19]  619 	ld	c,-1 (ix)
   035C 06 00         [ 7]  620 	ld	b,#0x00
   035E 69            [ 4]  621 	ld	l, c
   035F 60            [ 4]  622 	ld	h, b
   0360 29            [11]  623 	add	hl, hl
   0361 29            [11]  624 	add	hl, hl
   0362 29            [11]  625 	add	hl, hl
   0363 09            [11]  626 	add	hl, bc
   0364 29            [11]  627 	add	hl, hl
   0365 29            [11]  628 	add	hl, hl
   0366 09            [11]  629 	add	hl, bc
   0367 29            [11]  630 	add	hl, hl
   0368 09            [11]  631 	add	hl, bc
   0369 29            [11]  632 	add	hl, hl
   036A 29            [11]  633 	add	hl, hl
   036B 01 00 40      [10]  634 	ld	bc,#0x4000
   036E 09            [11]  635 	add	hl,bc
   036F 4D            [ 4]  636 	ld	c,l
   0370 44            [ 4]  637 	ld	b,h
   0371 2Ar00r00      [16]  638 	ld	hl,(_vram)
   0374 11 F0 00      [10]  639 	ld	de, #0x00f0
   0377 19            [11]  640 	add	hl, de
   0378 7E            [ 7]  641 	ld	a, (hl)
   0379 23            [ 6]  642 	inc	hl
   037A 66            [ 7]  643 	ld	h,(hl)
   037B 6F            [ 4]  644 	ld	l,a
   037C DD 5E FE      [19]  645 	ld	e,-2 (ix)
   037F 16 00         [ 7]  646 	ld	d,#0x00
   0381 7D            [ 4]  647 	ld	a,l
   0382 83            [ 4]  648 	add	a, e
   0383 5F            [ 4]  649 	ld	e,a
   0384 7C            [ 4]  650 	ld	a,h
   0385 8A            [ 4]  651 	adc	a, d
   0386 57            [ 4]  652 	ld	d,a
   0387 13            [ 6]  653 	inc	de
   0388 13            [ 6]  654 	inc	de
   0389 13            [ 6]  655 	inc	de
   038A 13            [ 6]  656 	inc	de
   038B C5            [11]  657 	push	bc
   038C 21 06 32      [10]  658 	ld	hl,#0x3206
   038F E5            [11]  659 	push	hl
   0390 D5            [11]  660 	push	de
   0391 CDr00r00      [17]  661 	call	_put_frame_transparent
   0394 21 06 00      [10]  662 	ld	hl,#6
   0397 39            [11]  663 	add	hl,sp
   0398 F9            [ 6]  664 	ld	sp,hl
                            665 ;combat2.c:130: put_frame((unsigned char *)(vram[120]+x+6+6+6+6+6+3),6,50,0x4000+((6*50)*layer));
   0399 DD 4E FF      [19]  666 	ld	c,-1 (ix)
   039C 06 00         [ 7]  667 	ld	b,#0x00
   039E 69            [ 4]  668 	ld	l, c
   039F 60            [ 4]  669 	ld	h, b
   03A0 29            [11]  670 	add	hl, hl
   03A1 29            [11]  671 	add	hl, hl
   03A2 29            [11]  672 	add	hl, hl
   03A3 09            [11]  673 	add	hl, bc
   03A4 29            [11]  674 	add	hl, hl
   03A5 29            [11]  675 	add	hl, hl
   03A6 09            [11]  676 	add	hl, bc
   03A7 29            [11]  677 	add	hl, hl
   03A8 09            [11]  678 	add	hl, bc
   03A9 29            [11]  679 	add	hl, hl
   03AA 29            [11]  680 	add	hl, hl
   03AB 01 00 40      [10]  681 	ld	bc,#0x4000
   03AE 09            [11]  682 	add	hl,bc
   03AF 4D            [ 4]  683 	ld	c,l
   03B0 44            [ 4]  684 	ld	b,h
   03B1 2Ar00r00      [16]  685 	ld	hl,(_vram)
   03B4 11 F0 00      [10]  686 	ld	de, #0x00f0
   03B7 19            [11]  687 	add	hl, de
   03B8 7E            [ 7]  688 	ld	a, (hl)
   03B9 23            [ 6]  689 	inc	hl
   03BA 66            [ 7]  690 	ld	h,(hl)
   03BB 6F            [ 4]  691 	ld	l,a
   03BC DD 5E FE      [19]  692 	ld	e,-2 (ix)
   03BF 16 00         [ 7]  693 	ld	d,#0x00
   03C1 7D            [ 4]  694 	ld	a,l
   03C2 83            [ 4]  695 	add	a, e
   03C3 5F            [ 4]  696 	ld	e,a
   03C4 7C            [ 4]  697 	ld	a,h
   03C5 8A            [ 4]  698 	adc	a, d
   03C6 57            [ 4]  699 	ld	d,a
   03C7 21 21 00      [10]  700 	ld	hl,#0x0021
   03CA 19            [11]  701 	add	hl,de
   03CB EB            [ 4]  702 	ex	de,hl
   03CC C5            [11]  703 	push	bc
   03CD 21 06 32      [10]  704 	ld	hl,#0x3206
   03D0 E5            [11]  705 	push	hl
   03D1 D5            [11]  706 	push	de
   03D2 CDr00r00      [17]  707 	call	_put_frame
   03D5 21 06 00      [10]  708 	ld	hl,#6
   03D8 39            [11]  709 	add	hl,sp
   03D9 F9            [ 6]  710 	ld	sp,hl
                            711 ;combat2.c:131: bank5_4000();
   03DA CDr00r00      [17]  712 	call	_bank5_4000
                            713 ;combat2.c:133: put_frame((unsigned char *)(vram[120]+x+6+6),6,50,0x4000+((6*50)*layer));
   03DD DD 4E FF      [19]  714 	ld	c,-1 (ix)
   03E0 06 00         [ 7]  715 	ld	b,#0x00
   03E2 69            [ 4]  716 	ld	l, c
   03E3 60            [ 4]  717 	ld	h, b
   03E4 29            [11]  718 	add	hl, hl
   03E5 29            [11]  719 	add	hl, hl
   03E6 29            [11]  720 	add	hl, hl
   03E7 09            [11]  721 	add	hl, bc
   03E8 29            [11]  722 	add	hl, hl
   03E9 29            [11]  723 	add	hl, hl
   03EA 09            [11]  724 	add	hl, bc
   03EB 29            [11]  725 	add	hl, hl
   03EC 09            [11]  726 	add	hl, bc
   03ED 29            [11]  727 	add	hl, hl
   03EE 29            [11]  728 	add	hl, hl
   03EF 01 00 40      [10]  729 	ld	bc,#0x4000
   03F2 09            [11]  730 	add	hl,bc
   03F3 4D            [ 4]  731 	ld	c,l
   03F4 44            [ 4]  732 	ld	b,h
   03F5 2Ar00r00      [16]  733 	ld	hl,(_vram)
   03F8 11 F0 00      [10]  734 	ld	de, #0x00f0
   03FB 19            [11]  735 	add	hl, de
   03FC 7E            [ 7]  736 	ld	a, (hl)
   03FD 23            [ 6]  737 	inc	hl
   03FE 66            [ 7]  738 	ld	h,(hl)
   03FF 6F            [ 4]  739 	ld	l,a
   0400 DD 5E FE      [19]  740 	ld	e,-2 (ix)
   0403 16 00         [ 7]  741 	ld	d,#0x00
   0405 7D            [ 4]  742 	ld	a,l
   0406 83            [ 4]  743 	add	a, e
   0407 5F            [ 4]  744 	ld	e,a
   0408 7C            [ 4]  745 	ld	a,h
   0409 8A            [ 4]  746 	adc	a, d
   040A 57            [ 4]  747 	ld	d,a
   040B 21 0C 00      [10]  748 	ld	hl,#0x000c
   040E 19            [11]  749 	add	hl,de
   040F EB            [ 4]  750 	ex	de,hl
   0410 C5            [11]  751 	push	bc
   0411 21 06 32      [10]  752 	ld	hl,#0x3206
   0414 E5            [11]  753 	push	hl
   0415 D5            [11]  754 	push	de
   0416 CDr00r00      [17]  755 	call	_put_frame
   0419 21 06 00      [10]  756 	ld	hl,#6
   041C 39            [11]  757 	add	hl,sp
   041D F9            [ 6]  758 	ld	sp,hl
                            759 ;combat2.c:134: bank7_4000();
   041E CDr00r00      [17]  760 	call	_bank7_4000
                            761 ;combat2.c:136: put_frame((unsigned char *)(vram[120]+x+6+6+6),6,50,0x4000+((6*50)*layer));
   0421 DD 4E FF      [19]  762 	ld	c,-1 (ix)
   0424 06 00         [ 7]  763 	ld	b,#0x00
   0426 69            [ 4]  764 	ld	l, c
   0427 60            [ 4]  765 	ld	h, b
   0428 29            [11]  766 	add	hl, hl
   0429 29            [11]  767 	add	hl, hl
   042A 29            [11]  768 	add	hl, hl
   042B 09            [11]  769 	add	hl, bc
   042C 29            [11]  770 	add	hl, hl
   042D 29            [11]  771 	add	hl, hl
   042E 09            [11]  772 	add	hl, bc
   042F 29            [11]  773 	add	hl, hl
   0430 09            [11]  774 	add	hl, bc
   0431 29            [11]  775 	add	hl, hl
   0432 29            [11]  776 	add	hl, hl
   0433 01 00 40      [10]  777 	ld	bc,#0x4000
   0436 09            [11]  778 	add	hl,bc
   0437 4D            [ 4]  779 	ld	c,l
   0438 44            [ 4]  780 	ld	b,h
   0439 2Ar00r00      [16]  781 	ld	hl,(_vram)
   043C 11 F0 00      [10]  782 	ld	de, #0x00f0
   043F 19            [11]  783 	add	hl, de
   0440 7E            [ 7]  784 	ld	a, (hl)
   0441 23            [ 6]  785 	inc	hl
   0442 66            [ 7]  786 	ld	h,(hl)
   0443 6F            [ 4]  787 	ld	l,a
   0444 DD 5E FE      [19]  788 	ld	e,-2 (ix)
   0447 16 00         [ 7]  789 	ld	d,#0x00
   0449 7D            [ 4]  790 	ld	a,l
   044A 83            [ 4]  791 	add	a, e
   044B 5F            [ 4]  792 	ld	e,a
   044C 7C            [ 4]  793 	ld	a,h
   044D 8A            [ 4]  794 	adc	a, d
   044E 57            [ 4]  795 	ld	d,a
   044F 21 12 00      [10]  796 	ld	hl,#0x0012
   0452 19            [11]  797 	add	hl,de
   0453 EB            [ 4]  798 	ex	de,hl
   0454 C5            [11]  799 	push	bc
   0455 21 06 32      [10]  800 	ld	hl,#0x3206
   0458 E5            [11]  801 	push	hl
   0459 D5            [11]  802 	push	de
   045A CDr00r00      [17]  803 	call	_put_frame
   045D 21 06 00      [10]  804 	ld	hl,#6
   0460 39            [11]  805 	add	hl,sp
   0461 F9            [ 6]  806 	ld	sp,hl
                            807 ;combat2.c:140: layer=(layer+1)%(13*4);
   0462 DD 4E FF      [19]  808 	ld	c, -1 (ix)
   0465 06 00         [ 7]  809 	ld	b, #0x00
   0467 03            [ 6]  810 	inc	bc
   0468 21 34 00      [10]  811 	ld	hl,#0x0034
   046B E5            [11]  812 	push	hl
   046C C5            [11]  813 	push	bc
   046D CDr00r00      [17]  814 	call	__modsint
   0470 F1            [10]  815 	pop	af
   0471 F1            [10]  816 	pop	af
   0472 DD 75 FF      [19]  817 	ld	-1 (ix),l
   0475 C3r92r02      [10]  818 	jp	00102$
   0478                     819 _combat2_palette:
   0478 00                  820 	.db #0x00	; 0
   0479 06                  821 	.db #0x06	; 6
   047A 00                  822 	.db #0x00	; 0
   047B 00                  823 	.db #0x00	; 0
   047C 00                  824 	.db #0x00	; 0
   047D 00                  825 	.db #0x00	; 0
   047E 00                  826 	.db #0x00	; 0
   047F 00                  827 	.db #0x00	; 0
   0480 00                  828 	.db #0x00	; 0
   0481 00                  829 	.db #0x00	; 0
   0482 00                  830 	.db #0x00	; 0
   0483 00                  831 	.db #0x00	; 0
   0484 00                  832 	.db #0x00	; 0
   0485 00                  833 	.db #0x00	; 0
   0486 00                  834 	.db #0x00	; 0
   0487 00                  835 	.db #0x00	; 0
   0488                     836 _intro_palette:
   0488 00                  837 	.db #0x00	; 0
   0489 01                  838 	.db #0x01	; 1
   048A 04                  839 	.db #0x04	; 4
   048B 0B                  840 	.db #0x0b	; 11
   048C 05                  841 	.db #0x05	; 5
   048D 03                  842 	.db #0x03	; 3
   048E 10                  843 	.db #0x10	; 16
   048F 19                  844 	.db #0x19	; 25
   0490 0F                  845 	.db #0x0f	; 15
   0491 0C                  846 	.db #0x0c	; 12
   0492 1A                  847 	.db #0x1a	; 26
   0493 0E                  848 	.db #0x0e	; 14
   0494 17                  849 	.db #0x17	; 23
   0495 02                  850 	.db #0x02	; 2
   0496 06                  851 	.db #0x06	; 6
   0497 00                  852 	.db #0x00	; 0
   0498                     853 ___str_0:
   0498 69 6E 74 72 6F 2D   854 	.ascii "intro-oc.scr"
        6F 63 2E 73 63 72
   04A4 00                  855 	.db 0x00
   04A5                     856 ___str_1:
   04A5 4A 31 41 2E 73 63   857 	.ascii "J1A.scr"
        72
   04AC 00                  858 	.db 0x00
   04AD                     859 ___str_2:
   04AD 4A 31 52 2E 73 63   860 	.ascii "J1R.scr"
        72
   04B4 00                  861 	.db 0x00
   04B5                     862 ___str_3:
   04B5 4A 32 41 2E 73 63   863 	.ascii "J2A.scr"
        72
   04BC 00                  864 	.db 0x00
   04BD                     865 ___str_4:
   04BD 4A 32 52 2E 73 63   866 	.ascii "J2R.scr"
        72
   04C4 00                  867 	.db 0x00
   04C5                     868 ___str_5:
   04C5 66 6F 6E 64 32 2E   869 	.ascii "fond2.scr"
        73 63 72
   04CE 00                  870 	.db 0x00
                            871 	.area _CODE
                            872 	.area _INITIALIZER
   0000                     873 __xinit__nFileNameLen:
   0000 00                  874 	.db #0x00	; 0
                            875 	.area _CABS (ABS)
